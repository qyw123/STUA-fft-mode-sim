# SOC模型架构概述

本项目实现了一个片上系统(SOC)模拟模型，主要用于高性能计算和人工智能加速器应用。以下是系统的整体架构和各主要组件介绍：

## 系统总体架构

该SOC模型采用异构计算架构，包含以下核心组件：
- VCore: 矢量处理核心，系统的主要计算单元
- DDR: 系统主存储器控制器，负责大容量数据存储
- GSM: 全局共享内存，用于多计算单元间的数据共享
- CAC: 缓存加速控制器，提高数据访问效率
- Soc: 顶层系统控制单元，协调各组件间通信和任务调度

## 功能特点

1. **高性能计算加速**：专为矩阵运算、卷积和傅里叶变换等计算密集型任务设计
2. **灵活的存储层次结构**：通过多级存储架构(DDR, GSM, 局部缓存)优化数据流
3. **TLM接口**：使用SystemC TLM 2.0接口实现组件间高效通信
4. **可扩展性**：模块化设计允许灵活添加新功能单元
5. **支持常见AI算法**：内置对矩阵乘法、卷积等常见算法的硬件加速

## 数据流模型

系统遵循以下典型数据流路径：
1. 数据从DDR加载到GSM
2. 从GSM分发到各VCore的本地存储
3. VCore执行计算任务
4. 计算结果通过GSM回写到DDR

## 应用场景

该SOC模型主要针对：
- 神经网络推理加速
- 图像和信号处理
- 科学计算
- 大规模矩阵运算

## SystemC TLM 2.0技术实现

本模型充分利用了SystemC TLM 2.0（Transaction Level Modeling）标准，实现了高效精确的系统建模：

1. **接口类型**：
   - 使用标准的`tlm_initiator_socket`和`tlm_target_socket`建立模块间通信通道
   - 采用`multi_passthrough_initiator_socket`实现一对多连接
   - 所有数据交换通过标准化的`tlm_generic_payload`对象进行

2. **传输模式**：
   - **阻塞传输(b_transport)**：用于精确计时的交易传输
   - **DMI直接内存接口**：针对频繁的内存访问操作，通过`get_direct_mem_ptr`获取直接访问权限，大幅提高模拟性能
   - **非阻塞传输**：通过`nb_transport_fw/nb_transport_bw`实现异步通信机制

3. **时序控制**：
   - 使用`sc_time`和`sc_clock`管理系统时钟和组件延迟
   - 精确建模不同组件操作的时间延迟
   - 支持松散时序(Loosely Timed)和近似时序(Approximately Timed)建模风格

4. **内存映射**：
   - 实现详细的地址解码和路由机制
   - 使用地址范围检查确保访问合法性
   - 通过`invalidate_direct_mem_ptr`实现一致性保护

5. **互斥与同步**：
   - 使用SystemC事件(`sc_event`)进行模块间同步
   - 采用`SC_THREAD`和`wait()`机制模拟并行执行流
   - 通过事件通知链实现复杂控制流

这些TLM技术的应用使得模型能够在保持较高抽象级别的同时，提供足够的精度来评估系统性能和功能正确性。

## 开发与扩展

系统设计遵循模块化原则，开发者可以：
- 修改计算单元参数以适应不同性能需求
- 添加新的加速器单元
- 优化存储控制策略
- 实现新的指令集扩展

通过顶层接口，系统可以与外部硬件接口或软件框架集成，形成完整的异构计算平台。
